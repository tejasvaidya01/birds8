<?php

/**
 * @file
 * In this file we use widget hooks to extend their functionality.
 *
 * We use drupal hooks and add remove button for fields remove.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\Language\Language;
use Drupal\Component\Utility\NestedArray;
use Drupal\Core\Field\WidgetBase;

/**
 * Ajax callback remove field when remove click is trigger.
 *
 * In this callback we will replace field items. Main job
 * to delete field item we will done into submit handler.
 */
function multiple_fields_remove_button_js($form, FormStateInterface &$form_state) {
  $button = $form_state->getTriggeringElement();
  $address = array_slice($button['#array_parents'], 0, -2);
  // Go one level up in the form, to the widgets container.
  $parent_element = NestedArray::getValue($form, $address);
  $field_name = $parent_element['#field_name'];
  $parents = $parent_element['#field_parents'];
  $widget_state = WidgetBase::getWidgetState($parents, $field_name, $form_state);
  // Go one level up in the form, to the widgets container.
  $element = NestedArray::getValue($form, array_slice($button['#array_parents'], 0, -3));
  $element['#id'] = $widget_state['wrapper_id'];
  $element['#prefix'] = '<div class="ajax-new-content">' . (isset($element['#prefix']) ? $element['#prefix'] : '');
  $element['#suffix'] = (isset($element['#suffix']) ? $element['#suffix'] : '') . '</div>';

  return $element;
}

/**
 * Implements hook_field_widget_form_alter().
 */
function multiple_fields_remove_button_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  // Remove button for the following field type widgets.
  $fieldWidgets = [
    'addressfield_standard',
    'date_popup',
    'date_text',
    'datetime',
    'decimal',
    'email',
    'entity_reference',
    'entity_reference_autocomplete',
    'float',
    'integer',
    'link',
    'location',
    'multiple_selects',
    'number',
    'property_reference',
    'string',
    'string_long',
    'telephone',
    'text',
    'text_long',
    'text_with_summary',
    'timestamp',
  ];

  // Add extra widgets with the help of others modules.
  \Drupal::moduleHandler()
    ->alter('multiple_field_remove_button_field_widgets', $fieldWidgets);

  $items = $context['items'];
  $fieldDefinition = $items->getFieldDefinition();
  $storage = $fieldDefinition->getFieldStorageDefinition();
  $type = $storage->getType();
  $cardinality = $storage->getCardinality();

  if ($cardinality == FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED &&
    in_array($type, $fieldWidgets)) {

    $field_parents = isset($element['#field_parents']) ? $element['#field_parents'] : [];
    $field_name = $fieldDefinition->getName();
    $language = isset($element['#language']) ? $element['#language'] : Language::LANGCODE_NOT_SPECIFIED;
    $delta = isset($element['#delta']) ? $element['#delta'] : 0;

    $parents = isset($element['#field_parents']) ? $element['#field_parents'] : [];
    $widget_state = WidgetBase::getWidgetState($parents, $field_name, $form_state);

    // Get parent which will we use into Remove Button Element.
    $parents = array_merge($field_parents, [
      $field_name,
      $language,
      $delta,
    ]);
    $remove_btn_name = implode('_', $parents) . '_remove_button';

    $wrapper = 'edit-' . str_replace('_', '-', $field_name) . '-wrapper';
    if (isset($widget_state['wrapper_id'])) {
      $wrapper = $widget_state['wrapper_id'];
    }

    $element['remove_button'] = [
      '#delta' => $delta,
      '#name' => $remove_btn_name,
      '#type' => 'submit',
      '#value' => t('Remove'),
      '#validate' => [],
      '#attributes' => [
        'class' => [
          'multiple-fields-remove-button',
        ],
      ],
      '#submit' => ['multiple_fields_remove_button_submit_handler'],
      '#limit_validation_errors' => [],
      '#ajax' => [
        'callback' => 'multiple_fields_remove_button_js',
        'effect' => 'fade',
        'wrapper' => $wrapper,
      ],
      '#weight' => 1000,
    ];
  }
}

/**
 * Submit callback to remove an item from the field UI multiple wrapper.
 *
 * When a remove button is submitted, we need to find the item that it
 * referenced and delete it. Since field UI has the deltas as a straight
 * unbroken array key, we have to renumber everything down. Since we do this
 * we *also* need to move all the deltas around in the $form_state['values']
 * and $form_state['input'] so that user changed values follow. This is a bit
 * of a complicated process.
 */
function multiple_fields_remove_button_submit_handler($form, FormStateInterface $form_state) {
  $formValues = $form_state->getValues();
  $formInputs = $form_state->getUserInput();
  $button = $form_state->getTriggeringElement();
  $delta = $button['#delta'];
  // Where in the form we'll find the parent element.
  $address = array_slice($button['#array_parents'], 0, -2);

  // Go one level up in the form, to the widgets container.
  $parent_element = NestedArray::getValue($form, $address);
  $field_name = $parent_element['#field_name'];
  $parents = $parent_element['#field_parents'];

  $field_state = WidgetBase::getWidgetState($parents, $field_name, $form_state);

  // Go ahead and renumber everything from our delta to the last
  // item down one. This will overwrite the item being removed.
  for ($i = $delta; $i <= $field_state['items_count']; $i++) {
    $old_element_address = array_merge($address, [$i + 1]);
    $new_element_address = array_merge($address, [$i]);

    $moving_element = NestedArray::getValue($form, $old_element_address);
    if ($key = array_search('widget', $old_element_address)) {
      unset($old_element_address[$key]);
    }
    $moving_element_value = NestedArray::getValue($formValues, $old_element_address);
    $moving_element_input = NestedArray::getValue($formInputs, $old_element_address);

    if ($key = array_search('widget', $new_element_address)) {
      unset($new_element_address[$key]);
    }
    // Tell the element where it's being moved to.
    $moving_element['#parents'] = $new_element_address;

    // Move the element around.
    NestedArray::setValue($formValues, $moving_element['#parents'], $moving_element_value, TRUE);
    NestedArray::setValue($formInputs, $moving_element['#parents'], $moving_element_input);

    // Save new element values.
    foreach ($formValues as $key => $value) {
      $form_state->setValue($key, $value);
    }
    $form_state->setUserInput($formInputs);

    // Move the entity in our saved state.
    if (isset($field_state['original_deltas'][$i + 1])) {
      $field_state['original_deltas'][$i] = $field_state['original_deltas'][$i + 1];
    }
    else {
      unset($field_state['original_deltas'][$i]);
    }
  }

  // Replace the deleted entity with an empty one. This helps to ensure that
  // trying to add a new entity won't resurrect a deleted entity
  // from the trash bin.
  // $count = count($field_state['entity']);
  // Then remove the last item. But we must not go negative.
  if ($field_state['items_count'] > 0) {
    $field_state['items_count']--;
  }

  // Fix the weights. Field UI lets the weights be in a range of
  // (-1 * item_count) to (item_count). This means that when we remove one,
  // the range shrinks; weights outside of that range then get set to
  // the first item in the select by the browser, floating them to the top.
  // We use a brute force method because we lost weights on both ends
  // and if the user has moved things around, we have to cascade because
  // if I have items weight weights 3 and 4, and I change 4 to 3 but leave
  // the 3, the order of the two 3s now is undefined and may not match what
  // the user had selected.
  $address = array_slice($button['#array_parents'], 0, -1);
  $input = NestedArray::getValue($formInputs, $address);
  // Sort by weight.
  uasort($input, '_field_multiple_value_form_sort_helper');

  // Reweight everything in the correct order.
  $weight = -1 * $field_state['items_count'];
  foreach ($input as $key => $item) {
    if ($item) {
      $input[$key]['_weight'] = $weight++;
    }
  }
  NestedArray::setValue($formInputs, $address, $input);
  $form_state->setUserInput($formInputs);
  $field_state['wrapper_id'] = $form[$field_name]['#id'];
  WidgetBase::setWidgetState($parents, $field_name, $form_state, $field_state);

  $form_state->setRebuild();
}
